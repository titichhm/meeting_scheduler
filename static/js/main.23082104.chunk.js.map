{"version":3,"sources":["components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","head","st","et","pt","map","dta","App","useState","allData","setData","useEffect","getData","a","fetch","proxyUrl","response","json","data","className","style","height","backgroundColor","color","fontSize","fontFamily","icon","faArrowDown","faCalendarAlt","type","onChange","v","target","value","description","start_time","end_time","participants","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.23082104.chunk.js","sourcesContent":["import React from 'react';\r\n \r\nconst Header =({head,st,et,pt}) =>{\r\n  \r\n  return(\r\n    <div>\r\n      <ol>\r\n          <h4> {head}</h4>\r\n          <h4>Timing of meeting -</h4><p>{st}-{et}</p>\r\n          <h4>Participants-</h4>\r\n          {pt.map(dta=>(\r\n          <p>{dta}</p>\r\n          ))}\r\n          <br/>\r\n      </ol>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React,{useEffect,useState, Component} from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowDown, faCalendarAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst App=()=> {\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n  const targetUrl = 'http://fathomless-shelf-5846.herokuapp.com/api/schedule?date=%227/8/2019%22';\n  const [allData,setData]=useState([]);\n  \n  useEffect(()=>{\n    getData();\n  },[]);\n\n  const getData =  async () =>{\n    const response= await fetch(proxyUrl + targetUrl);\n    const data=await response.json();\n    setData(data);\n  }\n\n  return( \n    \n    <div className=\"App\">\n      <div style={{height:150,backgroundColor:\"#9370DB\",color:\"white\",fontSize:20,fontFamily:\"Bahnschrift Light\"}}>\n        <div className=\"column\">\n          <b><br/><br/><FontAwesomeIcon icon={faArrowDown} /> Firebase Database Setup <FontAwesomeIcon icon={faArrowDown} /> </b>\n        </div>\n        <div className=\"column\">\n          <b><br/><FontAwesomeIcon icon={faArrowDown} />     Select a date (Default - 7/8/2019)     <FontAwesomeIcon icon={faArrowDown} /></b><br/> <br/>      \n          <FontAwesomeIcon icon={faCalendarAlt} color='white'/>  <input type=\"date\" style={{height:20}} className=\"DATE\" onChange={v => getData(v.target.value)}/>\n          <p className=\"warning\">(Data might take some time load)</p>\n        </div>  \n      </div>\n\n      <br/>\n      <div className=\"row\">\n        <div className=\"column\">\n          <p></p>\n        </div>\n\n        <div className=\"column\">{allData.map(dta=>(\n          <Header head={dta.description} st={dta.start_time} et={dta.end_time} pt={dta.participants}/>\n          ))}\n        </div>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();"],"sourceRoot":""}